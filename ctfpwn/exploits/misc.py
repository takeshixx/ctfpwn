from collections import namedtuple
from functools import partial
import sys
import struct
try:
    import ipaddress
except ImportError:
    class ipaddress:
        IPv4Address = None

Args = namedtuple('Args', ('ip', 'port', 'team'))


def data_decode(fmt, b, endian='<'):
    return struct.unpack(endian + fmt, b)[0]


def data_encode(fmt, b, endian='<'):
    return struct.pack(endian + fmt, b)


uint64_d = partial(data_decode, 'L')
uint64_e = partial(data_encode, 'L')
int64_d = partial(data_decode, 'l')
int64_e = partial(data_encode, 'l')
uint32_d = partial(data_decode, 'I')
uint32_e = partial(data_encode, 'I')
int32_d = partial(data_decode, 'i')
int32_e = partial(data_encode, 'i')
uint16_d = partial(data_decode, 'H')
uint16_e = partial(data_encode, 'H')
int16_d = partial(data_decode, 'h')
int16_e = partial(data_encode, 'h')
uint8_d = partial(data_decode, 'B')
uint8_e = partial(data_encode, 'B')
int8_d = partial(data_decode, 'b')
int8_e = partial(data_encode, 'b')
char_d = partial(data_decode, 'c')
char_e = partial(data_encode, 'c')


def parse_cmdline(argv=sys.argv):
    """
    Parses the commandline arguments

    >>> parse_cmdline(['exploit.py', '127.0.0.1', '80', '123'])
    Args(ip='127.0.0.1', port='80', team='123')
    >>> parse_cmdline()
    [...]
    RuntimeError:  Missing arguments. Required ip, port, team got []
    >>> sys.argv = ['exploit.py', '127.0.0.1', '80', '123']
    >>> parse_cmdline()
    Args(ip='127.0.0.1', port='80', team='123')

    :return: Namedtuple of Arguments
    :rtype: Args
    """
    if len(argv) < 4:
        raise RuntimeError('Missing arguments. Required {} got {}'.format(
            ', '.join(Args._fields),
            argv[1:]
        ))
    return Args(*argv[1:])


def ip2team(ip, base=60):
    if isinstance(ip, str):
        octets = tuple(map(int, ip.split('.')))
    elif isinstance(ip, ipaddress.IPv4Address):
        octets = tuple(int(ip).to_bytes(4, 'big'))

    return (octets[1] - base) * 256 + octets[2]


def team2ip(team, base=60):
    ip = '10.{}.{}.2'.format(team // 256 + base, team % 256)
    if ipaddress.IPv4Address:
        return ipaddress.IPv4Address(ip)
    else:
        return ip
