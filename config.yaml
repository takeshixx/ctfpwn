# General
database:
  host: '127.0.0.1'
  port: 27017

ctf_network: '172.23.11.0/24,172.22.12.0/24'
ctf_network_exclude: '1.1.1.1'
ctf_own_box: '10.60.42.2'

# A CTF round will be ~2min
ctf_tick: 120

# Check alive hosts every x minutes
ctf_target_alive_interval: 180

# Global instance to grep for flags, e.g.JAJAJAJAJAJAJAJAJAJAJAJAJAJAJAA=
ctf_flag_grep: '(\w{31}=)'

# Start of the CTF (November 21, 2015 at 10:00 UTC)
game_start: 1448100000

# The time when the network should be open (1hour after CTF has started)
network_open: game_start + 60 * 60

# Exploit Service
exploit_stats_interval: 8
exploit_supervisor_interval: 25
supervisor_clean_workers_interval: 120
# If an exploit is still running after x seconds, kill it with fire!
kill_exploit_after: 120
# Maximum amount of concurrent running exploits.
max_concurrent_worksers: 2048
exploits_error_log_path: '/srv/ctf/logs'

# Flag Service
flag_submission_interval: 12
flag_submission_interval_max: 50
flag_stats_interval: 5
flag_service_host: '127.0.0.1'
flag_service_port: 8081
gameserver_host: '127.0.0.1'
gameserver_port: 9000
# How many flags should be submitted at the same time at max.
flag_max_submits: 1000
# Messages by the gameserver, need to be adjusted
game_server_msg_ready: 'Send me your flags...'
game_server_msg_success: 'accepted'
game_server_msg_success2: 'congratulations'
game_server_msg_expired: 'expired'
game_server_msg_service_down: 'corresponding'
game_server_msg_invalid: 'no such flag'
game_server_msg_own_flag: 'own flag'
game_server_msg_too_much: 'too much'
game_server_msg_already_submitted: 'already submitted'

# Target Service
target_stats_interval: 9
discovery_interval: 45
service_interval: 15
discovery_ports: [22, 80, 8080]
service_ports: [22, 80, 8080]


# API
api_listening_host: '127.0.0.1'
api_listening_port: 8080

#### LOGGING ####
logging:
    default: &DEFAULT_LOGGING
        version: 1
        disable_existing_loggers: False
        handlers: &DEFAULT_LOGGING_HANDLERS
            console:
                class: logging.StreamHandler
                formatter: color
                level: DEBUG
                stream: ext://sys.stdout
            syslog:
                class: logging.handlers.SysLogHandler
                level: ERROR
                formatter: extended
            file: &DEFAULT_LOGGING_HANDLERS_FILE
                class: logging.handlers.TimedRotatingFileHandler
                level: INFO
                formatter: extended
                filename: default.log
                when: h
                interval: 1
                backupCount: 10
        formatters: &DEFAULT_LOGGING_FORMATTERS
            color: &DEFAULT_LOGGING_FORMATTERS_COLOR
                class: helperlib.logging.ColorFormatter
                format: '[%(asctime)s] [%(levelname)9s] %(message)s'
                datefmt: '%H:%M:%S'
            extended: &DEFAULT_LOGGING_FORMATTERS_EXTENDED
                format: '[%(asctime)s] [%(levelname)9s] [%(name)20s] [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s'
                datefmt: '%H:%M:%S'
            simple: &DEFAULT_LOGGING_FORMATTERS_SIMPLE
                format: '[%(asctime)s] [%(levelname)9s] %(message)s'
                datefmt: '%H:%M:%S'
        root:
            level: NOTSET
            handlers:
                - console
                - file

    exploitservice:
        <<: *DEFAULT_LOGGING
        handlers:
            <<: *DEFAULT_LOGGING_HANDLERS
            file:
                <<: *DEFAULT_LOGGING_HANDLERS_FILE
                filename: exploitservice.log
        formatters:
            <<: *DEFAULT_LOGGING_FORMATTERS
            color:
                <<: *DEFAULT_LOGGING_FORMATTERS_COLOR
                format: '[%(asctime)s] [EXPLOITS] [%(levelname)9s] %(message)s'
            extended:
                <<: *DEFAULT_LOGGING_FORMATTERS_EXTENDED
                format: '[%(asctime)s] [EXPLOITS] [%(levelname)9s] [%(name)20s] [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s'
            simple:
                <<: *DEFAULT_LOGGING_FORMATTERS_SIMPLE
                format: '[%(asctime)s] [EXPLOITS] [%(levelname)9s] %(message)s'

    flagservice:
        <<: *DEFAULT_LOGGING
        handlers:
            <<: *DEFAULT_LOGGING_HANDLERS
            file:
                <<: *DEFAULT_LOGGING_HANDLERS_FILE
                filename: flagservice.log
        formatters:
            <<: *DEFAULT_LOGGING_FORMATTERS
            color:
                <<: *DEFAULT_LOGGING_FORMATTERS_COLOR
                format: '[%(asctime)s] [FLAGS] [%(levelname)9s] %(message)s'
            extended:
                <<: *DEFAULT_LOGGING_FORMATTERS_EXTENDED
                format: '[%(asctime)s] [FLAGS] [%(levelname)9s] [%(name)20s] [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s'
            simple:
                <<: *DEFAULT_LOGGING_FORMATTERS_SIMPLE
                format: '[%(asctime)s] [FLAGS] [%(levelname)9s] %(message)s'

    targetservice:
        <<: *DEFAULT_LOGGING
        handlers:
            <<: *DEFAULT_LOGGING_HANDLERS
            file:
                <<: *DEFAULT_LOGGING_HANDLERS_FILE
                filename: targetservice.log
        formatters:
            <<: *DEFAULT_LOGGING_FORMATTERS
            color:
                <<: *DEFAULT_LOGGING_FORMATTERS_COLOR
                format: '[%(asctime)s] [TARGETS] [%(levelname)9s] %(message)s'
            extended:
                <<: *DEFAULT_LOGGING_FORMATTERS_EXTENDED
                format: '[%(asctime)s] [TARGETS] [%(levelname)9s] [%(name)20s] [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s'
            simple:
                <<: *DEFAULT_LOGGING_FORMATTERS_SIMPLE
                format: '[%(asctime)s] [TARGETS] [%(levelname)9s] %(message)s'
