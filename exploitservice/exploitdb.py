"""This module provides an interface to the database and
anything that is needed to handle exploits."""
import time
import txmongo
from twisted.internet import defer

# Maximum amount of simultaneous connections to the database
SERVICE_MONGO_POOLSIZE = 100

class Flag():
    """
    A class that represents flags, as parsed from incoming lines. See REGEX_INPUT
    and the corresponding input format example.
    """
    def __init__(self, service, target, flag):
        self.service = service
        self.target = target
        self.flag = flag
        self.timestamp = int(time.time())


class ExploitDB():
    """
    An interface to the database. It provides methods to add/remove exploits and
    exploit runs and also for storing new flags in the database.
    """
    def __init__(self):
        try:
            self.mongo = txmongo.lazyMongoConnectionPool(pool_size=SERVICE_MONGO_POOLSIZE)
            self.exploitdb = self.mongo.exploitservice
            self.col_expl = self.exploitdb.exploits
            self.col_runs = self.exploitdb.runs
            self.flagdb = self.mongo.flagservice
            self.col_flags = self.flagdb.flags
        except Exception as e:
            pass


    @defer.inlineCallbacks
    def insert_new_flag(self, flag):
        """Insert a new flag if it does not already exist, set status to NEW."""
        try:
            yield self.col_flags.update_one(
                {'flag': flag.flag},
                {'$setOnInsert':
                    {
                        'service': flag.service,
                        'target': flag.target,
                        'flag': flag.flag,
                        'state': 'NEW',
                        'comment': '',
                        'timestamp': int(time.time()),
                        'submitted': 0
                    }
                },
                upsert=True
            )
        except Exception as e:
            print(e)

    @defer.inlineCallbacks
    def select_exploits(self, limit=0):
        docs = yield self.col_expl.find(limit=limit)
        defer.returnValue(docs)

    @defer.inlineCallbacks
    def select_services(self, limit=0):
        docs = yield self.col_expl.distinct('port')
        defer.returnValue(docs)

    @defer.inlineCallbacks
    def update_exploit(self, service, exploit, port, enabled):
        """Enable/Disable and exploit. If the exploit does not exists, it will be created."""
        _exploit = yield self.col_expl.find({"exploit": exploit})
        if _exploit:
            print('An entry for this exploit already exists: {}'.format(exploit))
            return

        yield self.col_expl.update_one(
                {
                    'service': service,
                    'exploit': exploit,
                    'port': port
                },
                {
                    '$setOnInsert':
                    {
                        'service': service,
                        'exploit': exploit,
                        'port': port,
                        'enabled': enabled
                    }
                }, upsert=True)

    @defer.inlineCallbacks
    def insert_run(self, service, exploit, target, port, state, started, finished):
        yield self.col_runs.insert({
            'service': service,
            'exploit': exploit,
            'target': target,
            'port': port,
            'state': state,
            'started': started,
            'finished': finished
        })