import signal
import StringIO
from twisted.internet import reactor, defer, protocol
from .tinylogs import log

class ExploitWorkerProtocol(protocol.ProcessProtocol):
    """
    An instance of this protocol represents a single instance
    of a running exploit. It allows to specify routines and
    callbacks based on the exploit behaviour.
    """
    def __init__(self, deferred):
        self.deferred = deferred
        self.exploit_output = StringIO.StringIO()

    def connectionMade(self):
        self.pid = self.transport.pid

    def stop(self):
        log.debug('stopping {}'.format(self.pid))
        if self.transport.pid:
            deferred = defer.Deferred()
            self.transport.signalProcess(signal.SIGTERM)
            reactor.callLater(5, self.kill)
            return deferred

        return defer.succeed(None)

    def kill(self):
        log.debug('killing {}'.format(self.pid))
        if self.transport.pid:
            self.transport.signalProcess(signal.SIGKILL)

    def outReceived(self, data):
        self.exploit_output.write(data)

    def processEnded(self, reason):

        if reason.value.exitCode is 0:
            self.deferred.callback(self.exploit_output.getvalue())
        else:
            self.deferred.errback(reason)