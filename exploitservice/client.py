"""
A client for exploitservice. It can be used to either enable or
disable existing exploits. If the exploit does not yet exists,
it will be created. So this is also a way to add new exploits
to the database.
"""
import sys
import os.path
from twisted.internet import reactor

from exploitdb import ExploitDB


def update_exploit(SERVICE, EXPLOIT, PORT, ENABLED):
    db = ExploitDB()
    d = db.update_exploit(SERVICE, EXPLOIT, PORT, ENABLED)
    d.addCallback(update_finished)

def update_finished(result):
    if result.modified_count > 0:
        print('Updated exploit')
    else:
        print('Nothing changed')

    reactor.stop()

def main():
    if len(sys.argv) < 5:
        print('Usage: {} <service> <exploit> <port> <enable>'.format(sys.argv[0]))
        print('<enable> is either true or false')
        return 1

    SERVICE = sys.argv[1]
    EXPLOIT = sys.argv[2]

    if not os.path.isfile(EXPLOIT):
        print('Not a valid file: {}'.format(EXPLOIT))
        print('Please provide the absolute path to the exploit executable.')
        return 1

    if not os.path.isabs(EXPLOIT):
        EXPLOIT = os.path.abspath(EXPLOIT)

    try:
        PORT = int(sys.argv[3])
    except:
        print('Invalid port: {}'.format(sys.argv[3]))
        return 1

    if sys.argv[4] in [1, 'TRUE', 'True', 'true', True]:
        ENABLED = True
    elif sys.argv[4] in [0, 'FALSE', 'False', 'false', False]:
        ENABLED = False
    else:
        print('Invalid value for enable: {}'.format(sys.argv[4]))
        return 1

    try:
        reactor.callWhenRunning(update_exploit, SERVICE, EXPLOIT, PORT, ENABLED)
        reactor.run()
        return 0
    except Exception as e:
        print(e)
        return 1

if __name__ == '__main__':
    sys.exit(main())
