#!/usr/bin/env python3
import logging
import sys
import asyncio
import signal

from twisted.internet import pollreactor
from twisted.internet.task import LoopingCall

pollreactor.install()
from twisted.internet import reactor
from helperlib.logging import default_config, load_config

from .exploitdb import ExploitDB
from .supervisor import Supervisor

STATS_INTERVAL = 8
SUPERVISOR_INTERVAL = 25

log = logging.getLogger(__name__)


async def stats(db):
    while True:
        await db.exploit_stats()
        await asyncio.sleep(STATS_INTERVAL)

async def _start(loop):
    exploit_db = await ExploitDB.create()
    loop.create_task(stats(exploit_db))
    supervisor = Supervisor(exploit_db)
    supervisor.start(SUPERVISOR_INTERVAL)

def run_exploitservice():
    try:
        load_config('exploitservice.ini', disable_existing_loggers=False)
    except Exception as e:
        default_config(level=logging.DEBUG, disable_existing_loggers=False)
        log.warning('No logging config file exploitservice.ini found. Using default')

    try:
        log.info('Starting exploitservice')

        loop = asyncio.get_event_loop()
        loop.create_task(_start(loop))
        # loop.add_signal_handler(signal.SIGINT, loop.stop)
        loop.run_forever()
    except KeyboardInterrupt:
        tasks = asyncio.Task.all_tasks()
        log.warning("Caught keyboard interrupt. Canceling %d tasks...", len(tasks))
        tasks = asyncio.gather(*tasks)
        tasks.cancel()
        loop.stop()
        loop.run_forever()
        # tasks.exception()
    except Exception as e:
        print(e)
        sys.exit(1)
    finally:
        loop.close()

if __name__ == '__main__':
    run_exploitservice()
